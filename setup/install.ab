import { has_failed, includes, exit, chars } from "std"

let name = "AmberNative"
let target = "amber"
let place = "/opt/amber"
let bins_folder = "/usr/local/bin"
let agent = has_failed("uname -a")
    then "unknown"
    else unsafe $uname -a$

echo ""

fun get_latest_release_tag() {
    let tag_url = "https://api.github.com/repos/Ph0enixKM/{name}/releases/latest"
    let tag_json = silent $curl -L "{tag_url}"$?
    // Get the tag name from the JSON
    let tag = $echo "\${nameof tag_json}" \
        | grep -Eo "tag_name\\"[^\\"]*\\"([^\\"]+)\\"" \
        | grep -Eo "\\"[^\\"]+\\"\$" \
        | grep -Eo "[^\\"\\s]+"$?
    return tag
}

main(args) {
    // Determine OS type
    let os_type = $uname -s$ failed {
        echo "Failed to determine OS type."
        echo "Please try again or use another download method."
        exit(1)
    }
    let os = os_type == "Darwin"
        then "macos"
        else "linux"

    // Determine architecture
    let arch_type = $uname -m$ failed {
        echo "Failed to determine architecture."
        echo "Please try again or use another download method."
        exit(1)
    }
    let arch = includes(["arm64", "aarch64"], arch_type)
        then "aarch64"
        else "x86_64"

    let user_only_install = includes(args, "--user")
    if user_only_install {
        let home = $echo \$HOME$ failed {
            echo "User installation requested, but unable to retrieve home directory from $HOME environment."
            exit(1)
        }
        if home == "" {
            echo "User installation requested, but unable to find home directory."
            exit(1)
        }
        place = "{home}/.local/lib/{arch}/amber"
        bins_folder = "{home}/.local/bin"
    }

    // Check if such directory exists
    unsafe $test -d "{place}"$

    if status == 0 {
        echo "Amber already installed"
        echo "It seems that Amber is already installed on your system. ({place})"
        echo "If you want to reinstall Amber, uninstall it first."
        echo "(Find out more at https://docs.amber-lang.com/getting_started/installation#uninstallation)"
        exit(2)
    }

    // Check if curl is installed
    if has_failed("curl -V") {
        echo "Curl is not installed on your system."
        echo "Please install `curl` and try again."
        exit(1)
    }

    echo "Installing Amber... ðŸš€"

    // Make the directories we need first to ensure we have permissions before downloading any files
    // this decreases the chance that our script results in partial installation leaving assets behind
    let sudo = user_only_install then "" else "sudo"
    // Create directory for amber
    silent ${sudo} mkdir -p "{place}"$ failed {
        echo "Failed to create directory for amber."
        if user_only_install {
            echo "Please make sure that root user can access {place} directory."
        } else {
            echo "Please make sure that your user can access {place} directory."
        }
        exit(1)
    }
    if user_only_install {
        silent $mkdir -p "{bins_folder}"$ failed {
            echo "Failed to create directory for amber bin at {bins_folder}."
            exit(1)
        }
    }

    let tag = get_latest_release_tag() failed {
        echo "Failed to get the latest release tag."
        echo "Please try again or use another download method."
        exit(1)
    }

    // Set the download link
    let url = "https://github.com/Ph0enixKM/{name}/releases/download/{tag}/amber_{os}_{arch}"

    // Download amber
    silent $curl -L -o "{target}" "{url}"$ failed {
        echo "Curl failed to download amber."
        echo "Something went wrong. Please try again later."
        exit(1)
    }

    // Move zipped version of amber
    ${sudo} mv "{target}" "{place}/{target}"$ failed {
        echo "Failed to move amber to the installation directory."
        echo "Please make sure that root user can access /opt directory."
        exit(1)
    }
    // Give permissions to execute amber
    ${sudo} chmod +x "{place}/{target}"$ failed {
        echo "Failed to give permissions to execute amber."
        echo "Please make sure that root user can access /opt directory."
        exit(1)
    }

    // Create amber symbol link
    ${sudo} ln -s "{place}/{target}" "{bins_folder}/{target}"$ failed {
        echo "Failed to create amber symbol link."
        echo "Please make sure that root user can access /usr/local/bin directory."
        exit(1)
    }

    // Send feedback to the server
    unsafe silent $curl -G --data-urlencode "agent={agent}" --data-urlencode "name=download" "https://amber-lang.com/api/visit"$

    // Send success message
    echo "Amber has been installed successfully. ðŸŽ‰"
    echo "> Now you can use amber by typing `amber` in your terminal."
    if user_only_install {
        echo "> Since you requested a user only install with `--user` ensure that ~/.local/bin is in your \\$PATH."
    }
}
